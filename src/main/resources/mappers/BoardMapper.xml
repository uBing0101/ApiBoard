<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.study.board.model.BoardMapper">
    <!-- MyBatis 에서 모든 설정과 SQL은 mapper 태그 사이에 선언 namespace 에는 BoardMapper 인터페이스 경로를 지정 -->

    <!-- SELECT 결과 Map -->
    <resultMap id="BoardResultMap" type="com.study.board.dto.BoardResponseDto">
        <!-- 데이터베이스에서 테이블의 컬럼은 언더바(_)로 단어를 구분하는 스네이크 케이스로 네이밍하고
             JAVA에서 변수는 문자로 단어를 구분하는 카멜 케이스 방식으로 네이밍 한다
             즉, board 테이블에서 SELECT한 컬럼과,
             BoardResponseDto에 선언된 멤버를 매핑하기 위해 resultMap 을 이용한다
             자동으로 Alias 를 처리해주는 기능이 있긴 하지만,
             MyBatis 공식문서 에는 resultMap이 아주 강력한 기능이라고 명시되어 있으니 참고하여 사용-->
        <result property="id"            column="id" />
        <result property="title"         column="title" />
        <result property="content"       column="content" />
        <result property="writer"        column="writer" />
        <result property="hits"          column="hits" />
        <result property="deleteYn"      column="delete_yn" />
        <result property="createdDate"   column="created_date" />
        <result property="modifiedDate"   column="modified_date" />
    </resultMap>

    <!-- WHERE 조건 -->
    <sql id="conditions">
    <!-- board 테이블의 where 조건을 처리해주는 SQL 조각 -->
        <where>
            delete_yn = 'N'
                <!-- 기본적으로 삭제되지 않은 데이터만 조회하도록 삭제 여부가 'N'인 데이터만 조회 -->
                <if test="keyword != null and keyword.equals('') == false">
                <!-- keyword를 파라미터로 전달받은 경우에만 LIKE 검색을 실행
                     검색 조건이 파라미터로 넘어왔다고 해도 키워드가 없으면 작동이 안됨 -->
                    <choose>
                        <when test="searchType == null or searchType.equals('')">
                        <!-- 검색 유형이 선택되지 않은 경우 제목, 내용, 작성자를 기준으로 LIKE 쿼리 를 실행 -->
                            AND (
                                title LIKE CONCAT('%', #{keyword}, '%')
                                OR content LIKE CONCAT('%', #{keyword}, '%')
                                OR writer LIKE CONCAT('%', #{keyword}, '%')
                            )
                        </when>

                        <otherwise>
                        <!-- 검색 유형이 선택 된 경우에는 제목, 내용, 작성자 중 한가지 에 대해 LIKE 쿼리를 실행 -->
                            <choose>
                                <when test="searchType.equals('title')">
                                    AND title LIKE CONCAT('%', #{keyword}, '%')
                                </when>

                                <when test="searchType.equals('content')">
                                    AND content LIKE CONCAT('%', #{keyword}, '%')
                                </when>

                                <when test="searchType.equals('writer')">
                                    AND writer LIKE CONCAT('%', #{keyword}, '%')
                                </when>
                            </choose>
                        </otherwise>
                    </choose>
                </if>
        </where>
    </sql>

    <!-- 게시글 수 조회 -->
    <select id="count" parameterType="com.study.paging.CommonParams" resultType="int">
    <!-- BoardMapper 인터페이스의 count() 메서드를 의미
         Mapper 인터페이스의 메서드명과 Mapper XML의 쿼리 아이디는 동일해야 한다
         파라미터 타입은 앞서 생성한 CommonParams를 지정, 결과 타입은 int 지정-->
        SELECT
            COUNT(*)
        FROM
            board
        <include refid="conditions" />
    </select>

    <!-- 게시글 리스트 조회 -->
    <select id="findAll" parameterType="com.study.paging.CommonParams" resultType="BoardResultMap">
    <!-- BoardMapper 인터페이스의 findAll() 메서드를 의미
         LIMIT 구문을 보면 첫번째 인자로 limitStart를, 두번째 인자로 recordPerPage를 전달
         자세한 내용은 Service 영역을 처리하는 과정에서 참고-->
        SELECT
        id
        , title
        , content
        , writer
        , hits
        , delete_yn
        , created_date
        , modified_date
        FROM
        board
        <include refid="conditions" />
        ORDER BY
        id DESC, created_date DESC
        LIMIT #{pagination.limitStart}, #{recordPerPage}
    </select>

</mapper>